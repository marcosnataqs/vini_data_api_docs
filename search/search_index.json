{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Hello world! Essa \u00e9 a documenta\u00e7\u00e3o do projeto Vini Data API. </p>"},{"location":"#sobre-o-projeto-vini-data-api","title":"Sobre o projeto Vini Data API","text":"<p>Esse projeto foi desenvolvido para atender aos objetivos do Tech Challenge da Fase 1 da P\u00f3s Gradua\u00e7\u00e3o em Machine Learning Engineering, turma 1MLET da FIAP. Na Fase 1, o foco do projeto \u00e9 a constru\u00e7\u00e3o de uma API p\u00fablica de consulta no site de vitivinicultura da Embrapa, a fim de alimentar uma base de dados que ser\u00e1 utilizada para um modelo de Machine Learning.</p>"},{"location":"#problema-de-negocio","title":"Problema de neg\u00f3cio","text":"<p>Voc\u00ea foi contratado para uma consultoria e seu trabalho envolve analisar os dados de vitivinicultura da Embrapa. A ideia do projeto \u00e9 a cria\u00e7\u00e3o de uma API p\u00fablica de consulta nos dados do site nas respectivas abas:</p> <ul> <li>Produ\u00e7\u00e3o;</li> <li>Processamento;</li> <li>Comercializa\u00e7\u00e3o;</li> <li>Importa\u00e7\u00e3o;</li> <li>Exporta\u00e7\u00e3o.</li> </ul> <p>A API vai servir para alimentar uma base de dados que futuramente ser\u00e1 usada para um modelo de Machine Learning.</p>"},{"location":"#objetivos-do-projeto","title":"Objetivos do projeto","text":"<ul> <li> Criar uma Rest API em Python que fa\u00e7a a consulta no site da Embrapa.</li> <li> A API deve estar documentada.</li> <li> \u00c9 recomend\u00e1vel (n\u00e3o obrigat\u00f3rio) a escolha de um m\u00e9todo de autentica\u00e7\u00e3o (JWT, por exemplo).</li> <li> Criar um plano para fazer o deploy da API, desenhando a arquitetura do projeto desde a ingest\u00e3o at\u00e9 a alimenta\u00e7\u00e3o do modelo (aqui n\u00e3o \u00e9 necess\u00e1rio elaborar um modelo de ML, mas \u00e9 preciso que voc\u00eas escolham um cen\u00e1rio interessante em que a API possa ser utilizada).</li> <li> Fazer um MVP realizando o deploy com um link compartilh\u00e1vel e um reposit\u00f3rio no github.</li> </ul>"},{"location":"#autores-e-contato","title":"Autores e contato","text":"<p>Estamos abertos a quaisquer sugest\u00f5es ou corre\u00e7\u00f5es que possam surgir durante a avalia\u00e7\u00e3o do nosso projeto. Caso identifique algum erro ou quest\u00e3o n\u00e3o abordada nesta documenta\u00e7\u00e3o, estamos dispon\u00edveis para ajud\u00e1-lo e realizar os ajustes necess\u00e1rios. Por favor, n\u00e3o hesite em entrar em contato conosco:</p> <p>Grupo 3 Turma: 1MLET Tech Challenge: Fase 1</p> <ul> <li>Lucas Alves Mauricio - lucasalves0905@gmail.com</li> <li>J\u00falio C\u00e9sar Dick Bernardes - juliocd.bernardes@gmail.com</li> <li>Fl\u00e1vio de Queiroz Pasquetti - queirozpasquetti@gmail.com</li> <li>Brisa do Mar Oliveira do Nascimento - brisamnascimento@gmail.com</li> <li>Marcos Nat\u00e3 Queiroz dos Santos - marcosnqs@gmail.com</li> </ul>"},{"location":"API/","title":"Documenta\u00e7\u00e3o da API","text":"<p>Essa etapa cont\u00e9m as vis\u00f5es da documenta\u00e7\u00e3o da API, incluindo autentica\u00e7\u00e3o, endpoints dispon\u00edveis, e exemplos de requisi\u00e7\u00f5es e respostas para a RESTful API. </p>"},{"location":"API/#visao-geral-da-api","title":"Vis\u00e3o geral da API","text":"<p>A Vini Data API \u00e9 uma API RESTful que foi desenvolvida para obter dados do site de vitivinicultura da Embrapa. \u00c9 uma op\u00e7\u00e3o segura para extra\u00e7\u00e3o dos dados do site para alimenta\u00e7\u00e3o de modelos de Machine Learning. Por ter sido desenvolvida com o uso da biblioteca FastAPI, sua especifica\u00e7\u00e3o e interface pode ser experimentada por meio do su\u00edte Swagger.</p>"},{"location":"API/#restful-api","title":"RESTful API","text":""},{"location":"API/#endpoints","title":"Endpoints","text":"<p>Nossa API disponibiliza endpoints para algumas funcionalidades:</p> ENDPOINTS DESCRI\u00c7\u00c3O GET /api/vitivinicultura/productions/{year} Retorna a um conjunto de objetos (JSON) de Produ\u00e7\u00e3o para um ano espec\u00edfico contendo produto, quantidade e tipo. O ano \u00e9 um par\u00e2metro obrigat\u00f3rio para a requisi\u00e7\u00e3o ser bem sucedida. GET /api/vitivinicultura/processings/{year} Retorna a um conjunto de objetos (JSON) de Processamento para um ano espec\u00edfico contendo produto, quantidade, tipo e classifica\u00e7\u00e3o. O ano \u00e9 um par\u00e2metro obrigat\u00f3rio para a requisi\u00e7\u00e3o ser bem sucedida. GET /api/vitivinicultura/commercializations/{year} Retorna a um conjunto de objetos (JSON) de Comercializa\u00e7\u00e3o para um ano espec\u00edfico contendo produto, quantidade e tipo. O ano \u00e9 um par\u00e2metro obrigat\u00f3rio para a requisi\u00e7\u00e3o ser bem sucedida. GET /api/vitivinicultura/imports/{year} Retorna a um conjunto de objetos (JSON) de Importa\u00e7\u00e3o para um ano espec\u00edfico contendo pa\u00eds, quantidade, valor e classifica\u00e7\u00e3o. O ano \u00e9 um par\u00e2metro obrigat\u00f3rio para a requisi\u00e7\u00e3o ser bem sucedida. GET /api/vitivinicultura/exports/{year} Retorna a um conjunto de objetos (JSON) de Exporta\u00e7\u00e3o para um ano espec\u00edfico contendo pa\u00eds, quantidade, valor e classifica\u00e7\u00e3o. O ano \u00e9 um par\u00e2metro obrigat\u00f3rio para a requisi\u00e7\u00e3o ser bem sucedida. POST /api/auth/register Cria um novo registro de usu\u00e1rio, senha POST /api/auth/jwt/login Realiza o login e retorna o Bearer Token do usuario. POST /api/auth/logout Realiza o logout"},{"location":"API/#restful-api-exemplos","title":"RESTful API exemplos","text":"<p>Aqui est\u00e3o alguns exemplos de intera\u00e7\u00f5es poss\u00edveis de serem realizadas na interface da API:</p>"},{"location":"API/#cria-um-novo-registro-de-usuario","title":"Cria um novo registro de usu\u00e1rio","text":""},{"location":"API/#requisicao-post","title":"Requisi\u00e7\u00e3o (POST):","text":"<pre><code>curl -X 'POST' \\\n  'https://vini-data-api.onrender.com/api/auth/register' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"email\": \"user@example.com\",\n  \"password\": \"string\",\n  \"is_active\": true,\n  \"is_superuser\": false,\n  \"is_verified\": false\n}'\n</code></pre>"},{"location":"API/#request-url","title":"Request URL","text":"<p>https://vini-data-api.onrender.com/api/auth/register</p>"},{"location":"API/#response-body","title":"Response Body","text":"<pre><code>{\n  \"id\": \"xxxxx-xxxx-xxx-876d-729be7d4xxxx\",\n  \"email\": \"user@example.com\",\n  \"is_active\": true,\n  \"is_superuser\": false,\n  \"is_verified\": false\n}\n</code></pre>"},{"location":"API/#consulta-os-dados","title":"Consulta os dados","text":"<p>Consulta os dados para o ano de 2020 na rota de Produ\u00e7\u00e3o</p>"},{"location":"API/#requisicao-get","title":"Requisi\u00e7\u00e3o (GET):","text":"<pre><code>curl -X 'GET' \\\n  'https://vini-data-api.onrender.com/api/vitivinicultura/productions/2020' \\\n  -H 'accept: application/json' \\\n  -H 'Authorization: Bearer ***Token***'\n</code></pre>"},{"location":"API/#request-url_1","title":"Request URL","text":"<p>https://vini-data-api.onrender.com/api/vitivinicultura/productions/2020</p>"},{"location":"API/#response-body_1","title":"Response Body","text":"<pre><code>{\n  \"productions\": [\n    {\n      \"product\": \"Tinto\",\n      \"quantity\": 146075996,\n      \"type\": \"VINHO DE MESA\"\n    },\n    {\n      \"product\": \"Branco\",\n      \"quantity\": 26432799,\n      \"type\": \"VINHO DE MESA\"\n    },\n    {\n      \"product\": \"Rosado\",\n      \"quantity\": 1391200,\n      \"type\": \"VINHO DE MESA\"\n    }\n    ...] \n...\n}\n</code></pre>"},{"location":"arquitetura/","title":"Arquitetura","text":""},{"location":"arquitetura/#diagrama-de-arquitetura","title":"Diagrama de Arquitetura","text":"<p>Para uma compreens\u00e3o mais detalhada da arquitetura do projeto, preparamos um diagrama de Arquitetura. Este diagrama ilustra de forma resumida como o dado \u00e9 obtido a partir das intera\u00e7\u00f5es do cliente at\u00e9 a entrada dos dados do modelo.</p> <p></p> <p>Diagrama Arquitetura</p>"},{"location":"arquitetura/#extracao-dos-dados","title":"Extra\u00e7\u00e3o dos dados","text":"<p>A extra\u00e7\u00e3o dos dados ocorre por meio de web scraping, sendo que a l\u00f3gica respons\u00e1vel pela extra\u00e7\u00e3o dos dados pode ser encontrada em <code>vini_data_api&gt;web&gt;api&gt;vitivinicultura&gt;extractions</code>. De maneira geral o c\u00f3digo respons\u00e1vel pela extra\u00e7\u00e3o dos dados est\u00e1 organizado de modo a se beneficiar da heran\u00e7a e seu diagrama de classes pode ser visualizado abaixo:</p> <p></p> <p>Estrutura c\u00f3digo de extra\u00e7\u00e3o de Dados</p>"},{"location":"arquitetura/#estrutura-codigo-de-extracao-de-dados","title":"Estrutura c\u00f3digo de extra\u00e7\u00e3o de dados","text":"<p>A classe Base implementa dois m\u00e9todos abstratos de modo que obriga seus filhos a implementarem os mesmos m\u00e9todos mantendo assim um padr\u00e3o de projeto. Al\u00e9m dos dois m\u00e9todos implementados na classe m\u00e3e, temos uma fun\u00e7\u00e3o de conex\u00e3o e extra\u00e7\u00e3o disponibilizada em <code>vini_data_api &gt;web&gt;utils</code> denominado web_data_extractor, esta fun\u00e7\u00e3o ser\u00e1 consumida em todas as classes filhas com o objetivo de conectar-se a referida p\u00e1gina web, extrair seu html e retornar uma lista somente com os dados de interesse para serem posteriormente tratados.</p> <p>O m\u00e9todo Normalize se encarrega de formatar a extra\u00e7\u00e3o dos dados em um json, este json por sua vez \u00e9 consumido dentro do m\u00e9todo Extract.</p> <p>O m\u00e9todo Extract trata-se do principal m\u00e9todo de cada uma das classes filhas, ele \u00e9 respons\u00e1vel por trabalhar com a sa\u00edda do m\u00e9todo Normalize sendo que nele, criamos os objetos \"pydanticos\" que ser\u00e3o posteriormente devolvidos na resposta da API call e futuramente adicionados ao banco de dados.</p> <p>Abaixo podem ser visualizados os gists de todas as classes envolvidas nesse diagrama, bem como da fun\u00e7\u00e3o web_data_extractor.</p> <ol> <li> <p>No c\u00f3digo abaixo, podemos observar o codigo da fun\u00e7\u00e3o web_data_extractor respons\u00e1vel por acessar a pagina WEB e coletar o HTML que ser\u00e1 utilizado no scrapping: <pre><code>    from typing import Dict, List\n    import requests\n    from bs4 import BeautifulSoup\n\n    def web_data_extractor(url: str) -&gt; List[Dict[str, str]]:\n        extracted_data: List[Dict[str, str]] = []\n\n        # Faz a requisi\u00e7\u00e3o para a p\u00e1gina\n        response = requests.get(url)\n        if response.status_code == 200:\n            # Parseia o conte\u00fado HTML da resposta\n            soup = BeautifulSoup(response.content, \"html.parser\")\n\n            # Encontra a tabela na p\u00e1gina\n            table = soup.find(\"table\", class_=\"tb_base tb_dados\")\n            if not table:\n                print(f\"Nenhuma tabela encontrada em {url}\")\n                return\n\n            # Extrai os cabe\u00e7alhos da tabela\n            headers = [header.text.strip() for header in table.find(\"thead\").find_all(\"th\")]\n\n            # Inicializa uma lista para armazenar os dados\n            table_data = []\n\n            # Extrai as linhas da tabela\n            for row in table.find(\"tbody\").find_all(\"tr\"):\n                cols = row.find_all(\"td\")\n                if cols:\n                    cols = [ele.text.strip() for ele in cols]\n                    table_data.append(dict(zip(headers, cols)))\n\n            extracted_data = table_data\n        else:\n            print(f\"Erro ao acessar {url}\")\n\n        return extracted_data\n</code></pre></p> </li> <li> <p>O codigo abaixo demonstra a implementa\u00e7\u00e3o da classe base: <pre><code>    from abc import ABC, abstractmethod\n    from typing import Any, List\n\n    from pydantic import BaseModel\n\n\n    class BaseExtraction(ABC):\n        def __init__(self) -&gt; None:\n            pass\n\n        @abstractmethod\n        def extract(self, year: int) -&gt; BaseModel:\n            pass\n\n        @abstractmethod\n        def normalize(self, data: List[dict[str, str]], *args: Any) -&gt; List[dict[str, str]]:\n            pass\n</code></pre></p> </li> <li>A seguir podemos observar o exeplo da classe production: <pre><code>    from typing import Any, List\n    from vini_data_api.web.api.vitivinicultura.extractions.base import BaseExtraction\n    from vini_data_api.web.api.vitivinicultura.schema import Production, ProductionResponse\n    from vini_data_api.web.utils.web_data_extractor import web_data_extractor\n\n    class ProductionExtraction(BaseExtraction):\n        def __init__(self) -&gt; None:\n            pass\n\n        def extract(self, year: int) -&gt; ProductionResponse:\n            # URLs das p\u00e1ginas para fazer a extra\u00e7\u00e3o\n            urls = [\n                f\"http://vitibrasil.cnpuv.embrapa.br/index.php?ano={year}&amp;opcao=opt_02\",\n            ]\n            productions = []\n\n            for url in urls:\n                data = web_data_extractor(url)\n                data = self.normalize(data)\n                for row in data:\n                    product = row[\"product\"]\n                    quantity = (\n                        int(row[\"quantity\"].replace(\".\", \"\"))\n                        if row[\"quantity\"] not in [\"-\", \"*\"]\n                        else 0\n                    )\n                    type = row[\"type\"]\n                    production = Production(product=product, quantity=quantity, type=type)\n                    productions.append(production)\n\n            return ProductionResponse(productions=productions)\n\n        def normalize(self, data: List[dict[str, str]], *args: Any) -&gt; List[dict[str, str]]:\n            flat_struct: List[dict[str, str]] = []\n            current_principal_product = None\n\n            for item in data:\n                if item[\"Produto\"].isupper():  # \u00c9 um produto principal\n                    current_principal_product = item[\"Produto\"]\n                else:  # \u00c9 um subproduto\n                    novo_item = {\n                        \"product\": item[\"Produto\"],\n                        \"quantity\": item[\"Quantidade (L.)\"],\n                        \"type\": current_principal_product,\n                    }\n                    flat_struct.append(novo_item)\n\n            return flat_struct\n</code></pre></li> </ol>"},{"location":"arquitetura/#construcao-da-api","title":"Constru\u00e7\u00e3o da API","text":"<p>Em se tratando da constru\u00e7\u00e3o da API, podemos considerar que o servidor da API constru\u00edda roda para fins de teste na base do Uvicorn, por\u00e9m ao subir o servidor para produ\u00e7\u00e3o espera-se que o mesmo execute sobre a base do Gunicorn, essa troca ocorre por meio da troca do parametro environment que faz parte do arquivo <code>settings.py</code> localizado em <code>vini_data_api&gt;settings.py</code> o mesmo arquivo dever\u00e1 ser utilizado para a configura\u00e7\u00e3o da conex\u00e3o com o banco de dados.</p> <p>Com rela\u00e7\u00e3o aos endpoints e a constru\u00e7\u00e3o de sua l\u00f3gica, podemos mencionar alguns pontos adicionais, sendo eles:</p> <ol> <li> <p>Todos os endpoints foram constru\u00eddos com objetivo de acessar os dados anualizados, isto se deve ao fato de que pesquisar a base hist\u00f3rica acaba por vezes em problemas de performance e quedas de conex\u00e3o com o site, com as chamadas anuais, conseguimos mitigar este risco.</p> </li> <li> <p>Existe uma valida\u00e7\u00e3o implementada que n\u00e3o permitir\u00e1 que o usu\u00e1rio efetue uma chamada API para um ano fora dos limites onde sabidamente existem dados.</p> </li> </ol> <p>A valida\u00e7\u00e3o da chamada API dentro de um per\u00edodo espec\u00edfico, pode ser estudada na fun\u00e7\u00e3o YearRangeValidation que pode ser encontrada em <code>vini_data_api&gt;utils&gt;utils.py</code> esta fun\u00e7\u00e3o foi implementada em cada um dos endpoints dispon\u00edveis de modo que somente ser\u00e3o executadas as API calls para os per\u00edodos de data pr\u00e9-estabelecidos.</p> <p>Os endpoints dispon\u00edveis, poder\u00e3o ser encontrados em <code>vini_data_api&gt;web&gt;api&gt;vitivinicultura&gt;views.py</code>, para a constru\u00e7\u00e3o dos mesmos, foi utilizada a lib FastAPI e nesta sess\u00e3o n\u00e3o entraremos no detalhe de cada endpoint, pois o mesmo ser\u00e1 documentado na sess\u00e3o seguinte do presente documento.</p> <p>Para fins de consulta ao c\u00f3digo, favor referir aos gists relacionados abaixo:</p>"},{"location":"arquitetura/#persistencia-no-banco-de-dados","title":"Persist\u00eancia no Banco de Dados","text":"<p>A persist\u00eancia de dados desse projeto \u00e9 realizada por meio de modelos no c\u00f3digo usando SQLAlchemy que mapeia as informa\u00e7\u00f5es da normaliza\u00e7\u00e3o para as tabelas finais no banco de dados PostgreSQL. A biblioteca FastAPI utiliza esses modelos para validar e serializar dados, enquanto o SQLAlchemy gerencia as sess\u00f5es e transa\u00e7\u00f5es de banco de dados gravando as informa\u00e7\u00f5es pertinentes.</p> <p>Foi necess\u00e1rio realizar a cria\u00e7\u00e3o do database vini_data_api e o deploy do banco de dados no Render.</p> <p></p> <p>Database vini_data_api</p> <p>Ao executar o projeto, o ORM escolhido se encarrega de criar as tabelas no banco de dados configurado nos schemas dos modelos.</p> <p></p> <p>Query para consulta na tabela Users</p> <p>Nessa etapa do projeto foram persistidos apenas os registros de usu\u00e1rios da API na tabela \u201cuser\u201d. Isso ocorre porque os dados consumidos pelo modelo de Machine Learning ser\u00e3o extra\u00eddos pela API em formato <code>.json</code>, conforme previsto na arquitetura e nos requisitos do Projeto.</p>"},{"location":"checklist/","title":"Checklist","text":""},{"location":"checklist/#verificacao-de-requisitos-do-projeto","title":"Verifica\u00e7\u00e3o de Requisitos do projeto","text":"<ul> <li> Criar uma Rest API em Python que fa\u00e7a a consulta no site da Embrapa.</li> <li> A API deve estar documentada.</li> <li> \u00c9 recomend\u00e1vel (n\u00e3o obrigat\u00f3rio) a escolha de um m\u00e9todo de autentica\u00e7\u00e3o (JWT, por exemplo).</li> <li> Criar um plano para fazer o deploy da API, desenhando a arquitetura do projeto desde a ingest\u00e3o at\u00e9 a alimenta\u00e7\u00e3o do modelo (aqui n\u00e3o \u00e9 necess\u00e1rio elaborar um modelo de ML, mas \u00e9 preciso que voc\u00eas escolham um cen\u00e1rio interessante em que a API possa ser utilizada).</li> <li> Fazer um MVP realizando o deploy com um link compartilh\u00e1vel e um reposit\u00f3rio no github.</li> </ul>"},{"location":"projeto/","title":"Projeto","text":""},{"location":"projeto/#origem-dos-dados","title":"Origem dos dados","text":"<p>O site de vitivinicultura da Embrapa disp\u00f5e de dados quantitativos de uvas processadas, produ\u00e7\u00e3o e comercializa\u00e7\u00e3o de vinhos, suco e derivados provenientes do Estado do Rio Grande do Sul, grande contribuinte para a produ\u00e7\u00e3o nacional desses insumos. Al\u00e9m disso, disp\u00f5e de dados de importa\u00e7\u00f5es e exporta\u00e7\u00f5es dos produtos da vitivinicultura, incluindo Pa\u00edses de Origem/Destino, quantidade e valor associado. Os dados disponibilizados possuem um recorte hist\u00f3rico que tem in\u00edcio em 1970 at\u00e9 2023.</p> <p></p> <p>Site de Vitivinicultura - Embrapa 2024</p>"},{"location":"projeto/#desenvolvimento-da-aplicacao","title":"Desenvolvimento da aplica\u00e7\u00e3o","text":"<p>Esse projeto foi desenvolvido usando o fastapi_template, configurando as etapas a seguir:</p> <ul> <li>API type: REST API</li> <li>Database: PostgreSQL database</li> <li>ORM: SQLAlchemy</li> <li>CI/CD: nesse momento optamos por n\u00e3o utilizar</li> </ul> <p>E como configura\u00e7\u00e3o adicional, definimos a op\u00e7\u00e3o add fastapi-users support como ativa, para atingir o objetivo do projeto para autentica\u00e7\u00e3o de usu\u00e1rios.</p> <p>Tamb\u00e9m configuramos as op\u00e7\u00f5es add dummy model, add example routers, add loguru logger para fornecer orienta\u00e7\u00f5es sobre como construir outros m\u00f3dulos, rotas e logs na aplica\u00e7\u00e3o, respectivamente. Al\u00e9m das configura\u00e7\u00f5es mencionadas, implementamos o recurso \u201cadd gunicorn server\u201d para atuar como servidor de produ\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <p>A configura\u00e7\u00e3o de backend dispon\u00edvel no template permite duas configura\u00e7\u00f5es espec\u00edficas: add authentication via cookie support e add JWT auth support, ambas foram definidas para essa etapa do projeto.</p> <p>Ap\u00f3s a configura\u00e7\u00e3o do template, a raiz do reposit\u00f3rio ficou com a seguinte estrutura:</p> <p></p> <p>Link para o reposit\u00f3rio do Template</p>"},{"location":"projeto/#deploy-da-aplicacao","title":"Deploy da aplica\u00e7\u00e3o","text":"<p>O deploy da aplica\u00e7\u00e3o e do banco de dados foi realizado utilizando a Cloud Render. Abaixo os links para aplica\u00e7\u00e3o, documenta\u00e7\u00e3o e seus reposit\u00f3rios.</p> <p>Reposit\u00f3rio de c\u00f3digo remoto</p> <p>Deploy da API</p> <p>Reposit\u00f3rio da Documenta\u00e7\u00e3o</p> <p>Documenta\u00e7\u00e3o</p> <p></p>"},{"location":"projeto/#modelo-de-machine-learning","title":"Modelo de Machine Learning","text":"<p>Abaixo seguem algumas aplica\u00e7\u00f5es poss\u00edveis dos dados desta API em projetos de machine learning:</p> <ol> <li> <p>Tipo Regress\u00e3o: </p> <p>Predi\u00e7\u00e3o de quantitativos de produ\u00e7\u00e3o e comercializa\u00e7\u00e3o de produtos</p> <p>Estimativa de valores monet\u00e1rios para Importa\u00e7\u00e3o e Exporta\u00e7\u00e3o.</p> </li> <li> <p>Tipo Classifica\u00e7\u00e3o:</p> <p>Classificar o potencial de consumo dos pa\u00edses para determinados produtos em Alto, M\u00e9dio e Baixo</p> </li> <li> <p>Tipo Clusteriza\u00e7\u00e3o:</p> <p>Grupo de potenciais clientes interessados por um determinado produto</p> <p>Nessa fase do projeto n\u00e3o focaremos no Modelo de Machine Learning e sim no desenvolvimento do projeto da API desde a ingest\u00e3o dos dados at\u00e9 a alimenta\u00e7\u00e3o do modelo.</p> </li> </ol> <p> Nota: As aplica\u00e7\u00f5es de modelos de Machine Learning levantadas nessa se\u00e7\u00e3o ser\u00e3o validadas no decorrer do projeto principalmente ap\u00f3s a etapa de pr\u00e9 processamento e an\u00e1lise dos dados.</p>"},{"location":"requisitos/","title":"Requisitos","text":"<p>Nesta se\u00e7\u00e3o, abordaremos os requisitos preliminares para o desenvolvimento do modelo englobando as principais bibliotecas utilizadas.</p>"},{"location":"requisitos/#bibliotecas-e-dependencias","title":"Bibliotecas e depend\u00eancias","text":"<p>Linguagem de programa\u00e7\u00e3o: Python ^3.9 para a aplica\u00e7\u00e3o Gerenciador de depend\u00eancias: Poetry</p> <p>abaixo, as principais bibliotecas e depend\u00eancias:</p> <ul> <li>fastapi = \"^0.100.0\"</li> <li>uvicorn = { version = \"^0.22.0\", extras = [\"standard\"] }</li> <li>gunicorn = \"^21.2.0\"</li> <li>fastapi-users = \"^13.0.0\"</li> <li>httpx-oauth = \"^0.10.2\"</li> <li>fastapi-users-db-sqlalchemy = \"^6.0.1\"</li> <li>pydantic = \"^2\"</li> <li>pydantic-settings = \"^2\"</li> <li>yarl = \"^1.9.2\"</li> <li>ujson = \"^5.8.0\"</li> <li>SQLAlchemy = {version = \"^2.0.18\", extras = [\"asyncio\"]}</li> <li>asyncpg = {version = \"^0.28.0\", extras = [\"sa\"]}</li> <li>httptools = \"^0.6.0\"</li> <li>loguru = \"^0.7.0\"</li> <li>beautifulsoup4 = \"^4.12.3\"</li> <li>requests = \"^2.31.0\"</li> <li>importlib = \"^1.0.4\"</li> </ul> <p>e, depend\u00eancias para ambiente dev:</p> <ul> <li>pytest = \"^7.2.1\"</li> <li>flake8 = \"~4.0.1\"</li> <li>mypy = \"^1.1.1\"</li> <li>isort = \"^5.11.4\"</li> <li>pre-commit = \"^3.0.1\"</li> <li>wemake-python-styleguide = \"^0.17.0\"</li> <li>black = \"^22.12.0\"</li> <li>autoflake = \"^1.6.1\"</li> <li>pytest-cov = \"^4.0.0\"</li> <li>anyio = \"^3.6.2\"</li> <li>pytest-env = \"^0.8.1\"</li> <li>httpx = \"^0.23.3\"</li> </ul>"},{"location":"requisitos/#versionamento-de-codigo","title":"Versionamento de c\u00f3digo","text":"<p>Git para versionamento e GitHub para reposit\u00f3rio de c\u00f3digo remoto.</p>"},{"location":"requisitos/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Para a documenta\u00e7\u00e3o foram utilizadas as bibliotecas:</p> <ul> <li>mkdocsmkdocs = \"^1.6.0\"</li> <li>mkdocs-material = \"^9.5.23\"</li> <li>mkdocstrings = {extras = [\"python\"], version = \"^0.25.1\"}</li> <li>pymdown-extensions = \"^10.8.1\"</li> <li>markdown = \"^3.6\"</li> </ul> <p>para a publica\u00e7\u00e3o da documenta\u00e7\u00e3o, usamos o Github Pages</p>"}]}